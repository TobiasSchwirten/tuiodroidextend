// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

package keimote;

public final class Data {
  private Data() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public enum MsgType
      implements com.google.protobuf.Internal.EnumLite {
    MAG(0, 0),
    ACCEL(1, 1),
    GYRO(2, 2),
    TOUCH(3, 3),
    BUTTON(4, 4),
    TOUCH2(5, 5),
    TOUCH3(6, 6),
    TOUCH4(7, 7),
    ;
    
    public static final int MAG_VALUE = 0;
    public static final int ACCEL_VALUE = 1;
    public static final int GYRO_VALUE = 2;
    public static final int TOUCH_VALUE = 3;
    public static final int BUTTON_VALUE = 4;
    public static final int TOUCH2_VALUE = 5;
    public static final int TOUCH3_VALUE = 6;
    public static final int TOUCH4_VALUE = 7;
    
    
    public final int getNumber() { return value; }
    
    public static MsgType valueOf(int value) {
      switch (value) {
        case 0: return MAG;
        case 1: return ACCEL;
        case 2: return GYRO;
        case 3: return TOUCH;
        case 4: return BUTTON;
        case 5: return TOUCH2;
        case 6: return TOUCH3;
        case 7: return TOUCH4;
        default: return null;
      }
    }
    
    public static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<MsgType>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<MsgType>() {
            public MsgType findValueByNumber(int number) {
              return MsgType.valueOf(number);
            }
          };
    
    private final int value;
    
    private MsgType(int index, int value) {
      this.value = value;
    }
    
    // @@protoc_insertion_point(enum_scope:keimote.MsgType)
  }
  
  public interface PhoneEventOrBuilder
      extends com.google.protobuf.MessageLiteOrBuilder {
    
    // required .keimote.MsgType type = 1;
    boolean hasType();
    keimote.Data.MsgType getType();
    
    // optional float x = 2;
    boolean hasX();
    float getX();
    
    // optional float y = 3;
    boolean hasY();
    float getY();
    
    // optional float z = 4;
    boolean hasZ();
    float getZ();
    
    // optional int32 xx = 5;
    boolean hasXx();
    int getXx();
    
    // optional int32 yy = 6;
    boolean hasYy();
    int getYy();
    
    // optional int32 buttontype = 7;
    boolean hasButtontype();
    int getButtontype();
    
    // optional bool state = 8;
    boolean hasState();
    boolean getState();
  }
  public static final class PhoneEvent extends
      com.google.protobuf.GeneratedMessageLite
      implements PhoneEventOrBuilder {
    // Use PhoneEvent.newBuilder() to construct.
    private PhoneEvent(Builder builder) {
      super(builder);
    }
    private PhoneEvent(boolean noInit) {}
    
    private static final PhoneEvent defaultInstance;
    public static PhoneEvent getDefaultInstance() {
      return defaultInstance;
    }
    
    public PhoneEvent getDefaultInstanceForType() {
      return defaultInstance;
    }
    
    private int bitField0_;
    // required .keimote.MsgType type = 1;
    public static final int TYPE_FIELD_NUMBER = 1;
    private keimote.Data.MsgType type_;
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    public keimote.Data.MsgType getType() {
      return type_;
    }
    
    // optional float x = 2;
    public static final int X_FIELD_NUMBER = 2;
    private float x_;
    public boolean hasX() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    public float getX() {
      return x_;
    }
    
    // optional float y = 3;
    public static final int Y_FIELD_NUMBER = 3;
    private float y_;
    public boolean hasY() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    public float getY() {
      return y_;
    }
    
    // optional float z = 4;
    public static final int Z_FIELD_NUMBER = 4;
    private float z_;
    public boolean hasZ() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    public float getZ() {
      return z_;
    }
    
    // optional int32 xx = 5;
    public static final int XX_FIELD_NUMBER = 5;
    private int xx_;
    public boolean hasXx() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    public int getXx() {
      return xx_;
    }
    
    // optional int32 yy = 6;
    public static final int YY_FIELD_NUMBER = 6;
    private int yy_;
    public boolean hasYy() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    public int getYy() {
      return yy_;
    }
    
    // optional int32 buttontype = 7;
    public static final int BUTTONTYPE_FIELD_NUMBER = 7;
    private int buttontype_;
    public boolean hasButtontype() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    public int getButtontype() {
      return buttontype_;
    }
    
    // optional bool state = 8;
    public static final int STATE_FIELD_NUMBER = 8;
    private boolean state_;
    public boolean hasState() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    public boolean getState() {
      return state_;
    }
    
    private void initFields() {
      type_ = keimote.Data.MsgType.MAG;
      x_ = 0F;
      y_ = 0F;
      z_ = 0F;
      xx_ = 0;
      yy_ = 0;
      buttontype_ = 0;
      state_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;
      
      if (!hasType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }
    
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeFloat(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeFloat(3, y_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeFloat(4, z_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, xx_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, yy_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, buttontype_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, state_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
    
      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(2, x_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(3, y_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(4, z_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, xx_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, yy_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, buttontype_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, state_);
      }
      memoizedSerializedSize = size;
      return size;
    }
    
    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }
    
    public static keimote.Data.PhoneEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static keimote.Data.PhoneEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static keimote.Data.PhoneEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data).buildParsed();
    }
    public static keimote.Data.PhoneEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return newBuilder().mergeFrom(data, extensionRegistry)
               .buildParsed();
    }
    public static keimote.Data.PhoneEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static keimote.Data.PhoneEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    public static keimote.Data.PhoneEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static keimote.Data.PhoneEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      Builder builder = newBuilder();
      if (builder.mergeDelimitedFrom(input, extensionRegistry)) {
        return builder.buildParsed();
      } else {
        return null;
      }
    }
    public static keimote.Data.PhoneEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input).buildParsed();
    }
    public static keimote.Data.PhoneEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return newBuilder().mergeFrom(input, extensionRegistry)
               .buildParsed();
    }
    
    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(keimote.Data.PhoneEvent prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }
    
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          keimote.Data.PhoneEvent, Builder>
        implements keimote.Data.PhoneEventOrBuilder {
      // Construct using keimote.Data.PhoneEvent.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }
      
      private void maybeForceBuilderInitialization() {
      }
      private static Builder create() {
        return new Builder();
      }
      
      public Builder clear() {
        super.clear();
        type_ = keimote.Data.MsgType.MAG;
        bitField0_ = (bitField0_ & ~0x00000001);
        x_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000002);
        y_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000004);
        z_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000008);
        xx_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        yy_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        buttontype_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        state_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }
      
      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }
      
      public keimote.Data.PhoneEvent getDefaultInstanceForType() {
        return keimote.Data.PhoneEvent.getDefaultInstance();
      }
      
      public keimote.Data.PhoneEvent build() {
        keimote.Data.PhoneEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }
      
      private keimote.Data.PhoneEvent buildParsed()
          throws com.google.protobuf.InvalidProtocolBufferException {
        keimote.Data.PhoneEvent result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(
            result).asInvalidProtocolBufferException();
        }
        return result;
      }
      
      public keimote.Data.PhoneEvent buildPartial() {
        keimote.Data.PhoneEvent result = new keimote.Data.PhoneEvent(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.x_ = x_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.y_ = y_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.z_ = z_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.xx_ = xx_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.yy_ = yy_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.buttontype_ = buttontype_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.state_ = state_;
        result.bitField0_ = to_bitField0_;
        return result;
      }
      
      public Builder mergeFrom(keimote.Data.PhoneEvent other) {
        if (other == keimote.Data.PhoneEvent.getDefaultInstance()) return this;
        if (other.hasType()) {
          setType(other.getType());
        }
        if (other.hasX()) {
          setX(other.getX());
        }
        if (other.hasY()) {
          setY(other.getY());
        }
        if (other.hasZ()) {
          setZ(other.getZ());
        }
        if (other.hasXx()) {
          setXx(other.getXx());
        }
        if (other.hasYy()) {
          setYy(other.getYy());
        }
        if (other.hasButtontype()) {
          setButtontype(other.getButtontype());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        return this;
      }
      
      public final boolean isInitialized() {
        if (!hasType()) {
          
          return false;
        }
        return true;
      }
      
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        while (true) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              
              return this;
            default: {
              if (!parseUnknownField(input, extensionRegistry, tag)) {
                
                return this;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              keimote.Data.MsgType value = keimote.Data.MsgType.valueOf(rawValue);
              if (value != null) {
                bitField0_ |= 0x00000001;
                type_ = value;
              }
              break;
            }
            case 21: {
              bitField0_ |= 0x00000002;
              x_ = input.readFloat();
              break;
            }
            case 29: {
              bitField0_ |= 0x00000004;
              y_ = input.readFloat();
              break;
            }
            case 37: {
              bitField0_ |= 0x00000008;
              z_ = input.readFloat();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              xx_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              yy_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              buttontype_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              state_ = input.readBool();
              break;
            }
          }
        }
      }
      
      private int bitField0_;
      
      // required .keimote.MsgType type = 1;
      private keimote.Data.MsgType type_ = keimote.Data.MsgType.MAG;
      public boolean hasType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      public keimote.Data.MsgType getType() {
        return type_;
      }
      public Builder setType(keimote.Data.MsgType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value;
        
        return this;
      }
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = keimote.Data.MsgType.MAG;
        
        return this;
      }
      
      // optional float x = 2;
      private float x_ ;
      public boolean hasX() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      public float getX() {
        return x_;
      }
      public Builder setX(float value) {
        bitField0_ |= 0x00000002;
        x_ = value;
        
        return this;
      }
      public Builder clearX() {
        bitField0_ = (bitField0_ & ~0x00000002);
        x_ = 0F;
        
        return this;
      }
      
      // optional float y = 3;
      private float y_ ;
      public boolean hasY() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      public float getY() {
        return y_;
      }
      public Builder setY(float value) {
        bitField0_ |= 0x00000004;
        y_ = value;
        
        return this;
      }
      public Builder clearY() {
        bitField0_ = (bitField0_ & ~0x00000004);
        y_ = 0F;
        
        return this;
      }
      
      // optional float z = 4;
      private float z_ ;
      public boolean hasZ() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      public float getZ() {
        return z_;
      }
      public Builder setZ(float value) {
        bitField0_ |= 0x00000008;
        z_ = value;
        
        return this;
      }
      public Builder clearZ() {
        bitField0_ = (bitField0_ & ~0x00000008);
        z_ = 0F;
        
        return this;
      }
      
      // optional int32 xx = 5;
      private int xx_ ;
      public boolean hasXx() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      public int getXx() {
        return xx_;
      }
      public Builder setXx(int value) {
        bitField0_ |= 0x00000010;
        xx_ = value;
        
        return this;
      }
      public Builder clearXx() {
        bitField0_ = (bitField0_ & ~0x00000010);
        xx_ = 0;
        
        return this;
      }
      
      // optional int32 yy = 6;
      private int yy_ ;
      public boolean hasYy() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      public int getYy() {
        return yy_;
      }
      public Builder setYy(int value) {
        bitField0_ |= 0x00000020;
        yy_ = value;
        
        return this;
      }
      public Builder clearYy() {
        bitField0_ = (bitField0_ & ~0x00000020);
        yy_ = 0;
        
        return this;
      }
      
      // optional int32 buttontype = 7;
      private int buttontype_ ;
      public boolean hasButtontype() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      public int getButtontype() {
        return buttontype_;
      }
      public Builder setButtontype(int value) {
        bitField0_ |= 0x00000040;
        buttontype_ = value;
        
        return this;
      }
      public Builder clearButtontype() {
        bitField0_ = (bitField0_ & ~0x00000040);
        buttontype_ = 0;
        
        return this;
      }
      
      // optional bool state = 8;
      private boolean state_ ;
      public boolean hasState() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      public boolean getState() {
        return state_;
      }
      public Builder setState(boolean value) {
        bitField0_ |= 0x00000080;
        state_ = value;
        
        return this;
      }
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000080);
        state_ = false;
        
        return this;
      }
      
      // @@protoc_insertion_point(builder_scope:keimote.PhoneEvent)
    }
    
    static {
      defaultInstance = new PhoneEvent(true);
      defaultInstance.initFields();
    }
    
    // @@protoc_insertion_point(class_scope:keimote.PhoneEvent)
  }
  
  
  static {
  }
  
  // @@protoc_insertion_point(outer_class_scope)
}
